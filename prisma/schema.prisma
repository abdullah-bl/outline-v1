datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password         Password?
  notes            Note[]
  projectDocuments ProjectDocument[]
  projects         Project[]
  litteres         Litter[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

// Project stuff

model Budget {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cost      Int      @default(0)
  cash      Int      @default(0)
  Item      Item[]
}

model Item {
  id        String   @id @default(cuid())
  name      String
  year      Int      @default(2020)
  duration  Int      @default(1) // in years
  budget    Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  budgetId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String            @id @default(cuid())
  name        String
  description String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  ducoments   ProjectDocument[]
  completed   Boolean           @default(false)

  cost     Int @default(0)
  duration Int @default(0) // in days

  statusId          String
  status            Status           @relation(fields: [statusId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author            User             @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId          String
  competitionType   CompetitionType? @relation(fields: [competitionTypeId], references: [id])
  competitionTypeId String?
  department        Department?      @relation(fields: [departmentId], references: [id])
  departmentId      String?
}

model Status {
  id        String   @id @default(cuid())
  name      String
  order     Int      @default(0) // order in which the status is displayed
  value     Int      @default(0) // progress in %
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]
}

model CompetitionType {
  id       String    @id @default(cuid())
  name     String
  projects Project[]

  @@index([name])
}

model Department {
  id       String    @id @default(cuid())
  name     String
  projects Project[]

  @@index([name])
}

model ProjectDocument {
  id          String   @id @default(cuid())
  name        String
  description String
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String   @unique
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Litter {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
}
